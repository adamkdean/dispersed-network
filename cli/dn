#!/bin/bash
#   __   __  __  ___ __  __  ___ __
#  |  \|/__`|__)|__ |__)/__`|__ |  \
#  |__/|.__/|   |___|  \.__/|___|__/
#              ______    __  __
#         |\ ||__  ||  |/  \|__)|__/
#         | \||___ ||/\|\__/|  \|  \
#
# dispersed network proof of concept
# (C) 2017 Adam K Dean <akd@dadi.co>

# load the config
source "${0%/*}/../config/config.sh"

#
# helpers
#
load_config() {
  if [[ ! -f "App.config" ]]; then
    echo "error: App.config not found"
    exit 1
  else
    # read whitelisted config values
    while read -r KEY VALUE; do
      case $KEY in
        APP_NAME)
          APP_NAME=$VALUE
          ;;
        APP_HOSTNAME)
          APP_HOSTNAME=$VALUE
          ;;
      esac
    done < "App.config"
    
    # check all the mandatory ones exist
    if [ -z $APP_NAME ]; then
      echo "error: APP_NAME not defined"
      exit 1
    fi
    if [ -z $APP_HOSTNAME ]; then
      echo "error: APP_HOSTNAME not defined"
      exit 1
    fi
  fi
}

api_get_route() {
  RESULT=$(
    curl \
      --silent \
      --request GET \
      --header "Authorization:$CONTROL_AUTH_TOKEN" \
      $CONTROL_ADDRESS/$1/$APP_NAME)

  echo "$1 $APP_NAME"
  echo "$RESULT"
}

api_post_route() {
  RESULT=$(
    curl \
      --silent \
      --request POST \
      --d $2 \
      --header "Authorization:$CONTROL_AUTH_TOKEN" \
      $CONTROL_ADDRESS/$1)
  
  echo "$1 $APP_NAME"
  echo "$RESULT"
}

#
# commands
#
build() {
  load_config
  
  # ensure we have a Dockerfile
  if [[ ! -f "Dockerfile" ]]; then
    echo "error: Dockerfile not found"
    exit 1
  fi
  
  # build docker image
  docker build --tag $REGISTRY_DOMAIN/$APP_NAME .
}

create() {
  load_config
  api_post_route \
    create \
    "{\"name\":\"$APP_NAME\",\"hostname\":\"$APP_HOSTNAME\"}"
}

help() {
  echo ""
  echo "Usage: dn COMMAND"
  echo ""
  echo "Commands:"
  echo "  build       build application"
  echo "  create      create new application"
  echo "  help        show usage"
  echo "  list        list applications"
  echo "  push        push changes to application"
  echo "  remove      remove application"
  echo "  restart     restart application"
  echo "  run         run application"
  echo "  start       start application"
  echo "  status      show application status"
  echo "  stop        stop application"
  echo "  version     show version"
  exit 0
}

list() {
  RESULT=$(
    curl \
      --silent \
      --request GET \
      --header "Authorization:$CONTROL_AUTH_TOKEN" \
      $CONTROL_ADDRESS/list)

  echo "list"
  echo "$RESULT"
}

push() {
  load_config
  
  # login to docker repo
  docker login \
    --username=$REGISTRY_USER \
    --password=$REGISTRY_PASS \
    $REGISTRY_DOMAIN

  # push docker image
  echo "pushing "$REGISTRY_DOMAIN/$APP_NAME""
  docker push "$REGISTRY_DOMAIN/$APP_NAME"
}

remove() {
  load_config
  api_get_route remove
}

restart() {
  load_config
  api_get_route restart
}

run() {
  build
  push
  create
  start
}

start() {
  load_config
  api_get_route start
}

status() {
  load_config
  api_get_route status
}

stop() {
  load_config
  api_get_route stop
}

version() {
  echo "dn v$VERSION"
  exit 0
}

#
# parse arguments
#
while (( $# > 0 ))
do
  opt="$1"
  shift

  case $opt in
    build)
      build
      ;;
    help|--help)
      help
      ;;
    list)
      list
      ;;
    push)
      push
      ;;
    remove)
      remove
      ;;
    restart)
      restart
      ;;
    run)
      run
      ;;
    start)
      start
      ;;
    status)
      status
      ;;
    stop)
      stop
      ;;
    version|-v|--version)
      version
      ;;
    --*)
      echo "Invalid option: '$opt'" >&2
      exit 1
      ;;
    *)
      break;
      ;;
  esac
done